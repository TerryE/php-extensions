Overview
========

The major rework arising from the 14-16 Dec review has now largely been implemented and is working:
excluding memory leak reports, only 4 of the tests fail and all of these with subtle variations on 
error path handling.  However, this leakage is still a major issue and since the intro of interning 
in the serial pools, this has grown from a small trickle in a few tests to some fairly large 
reports (e.g test47 has 89 leaks reported).  I need to do a full review of de-interning reuse.  

W/E review 14-16 Dec 2012
=========================

This has pretty much been implemented. The following items are still to do:

*   Review all initialisation / shutdown code to ensure that it is properly scoped -- that is per
    request bookends belong in lpc_request.c, per source bookends belong in lpc_source.c. So cache
    bookends are called from per request, pool bookends are called from per source -- except overall
    pool_init / pool_shutdown called from per request.

*   Review logging categories. At the moment basically everything is low-level pool reporting. We
    need some extra reporting categories for overall per-source and per-request info, plus logging
    of hrow / catch events.  

*   Add extra logging option to log each opcode/op1.type/op2.type -- need to decide whether to log
    these to a separate debug file. Run against PHP test suite and use o/p to develop note on Opcode
    coverage and Q on APC testing against the PHP test suite.   

*   Formalize the LPC_REF_COPY ((void *) 1) and LPC_REF_AUTOGEN ((void *) 2) usage. Review source
    code references to (\->|\.)filename\b to see usage cases when the reference is reused.

*   Add conditional opcode handler address replacement with LPC_REF_AUTOGEN. Note this not only
    increases the compression of the file-based record form, but move to another goal of removing
    all addressed based references from the cache format so that the cache file can be moved from
    php build to php build.

*   Develop small reporter scipt to list off cache contents, e.g.
       /opn/bin/php -d lpc.cache_pattern=".*" -d lpc.cache_replacement=".testNN.cache" \
                    -d lpc.filter="(?!.)" reporter.php

*   Review regression test automation for php test suite. And how filtering of output records is
    done -- e.g. how site-specfic (pathnames, etc.) error content is surpressed. 

*   (Long term) review how APC handles shallow copy references to SMA storage as a similar approach
    could enable aggregated object allocation at copy-in. Less emallocs. 

Other Module Specific
=====================

lpc_cache.c:

    APC has a mininum file age that is cacheable to prevent the caching of a file that is fetched
    which being stored.  It's proably worth disabling the LPC cache if the age is less than 2s say.

    The whole detection algo is a bit bumpy in that the script cache is validated on the basis of
    the PHP version, script directory, basename, mtime and filesize. On change of any of these, the
    cache is disabled for this request and the cache deleted. The next request creates the new
    cache, so you need two executions to prime the cache. It would be better to include inline retry
    logic so that the cache can be rebuilt on a single request. Also at the moment I am not setting 
    the cookie and request parameters to set the clear_flag_set boolean.

lpc_copy_op_array.c:

    Work out the interpretation and treatment of the scope field which should point back to the
    parent class in the case of a method.

    Need to add the new 2,4 functionality for interned strings etc as per "Performance Improvements"
    RFC.  These and the associated Zend Engine 2.4 macros haven't been debugged yet.
 
    Raise a bugrep for APC -- It assumes that unknown autoglobals must begin with _. However, this 
    is only a convention and there is nothing to stop another extensino declaring an autoglobal 
    without a leading underscore.

    Raise a bugrep for APC -- apc_copy_new_classes() and apc_copy_new_functions() locate the last 
    few classes / functions to be added by stepping forwards Nold entries.  They should step 
    backwards N-Nold+1 entries -- faster in general. 

lpc_copy_source.c:

    Cf. lpc_cache.c comment on filename sustitution.

    If the source includes classes with parents then this inheritance is validate using
    zend_do_inheritance(). This path needs testing.

    This still leaves the class structures in memory so these WILL leak.

lpc_hashtable.c:
    add Zend 2.4 insert interned strings for keys, etc.

    review interned string changes in PHP 5.4 to work out how this works 

    Copy out a new bucket with the deinterred key or inplace key

lpc_request.c:
    At the moment this fails if the request is stdin (request_fullpath == "-") as sb = NULL. 

    unwind code from MSHUTDOWN needs to be folded in RSHUTDOWN now that caches and stacks only have
    a request lifetime

php_lpc.c:
    The only real API call left is lpc_compile_file().  I am really not sure what this brings to the
    party in LPC.  Maybe once to discuss with Rasmus later. 

=== General Memory Leaks ===

    Nothing major. Typically one or two emalloced strings per included source and emalloced memory
    is captured at RSHUTDOWN anyway. The challenge is that the op_array data structures are released
    by the Zend RTS so I've got to work out the path variants to release these safely. Leaving these
    for RSHUTDOWN sweep up is inelegant and a slight annoyance but doing a double free is fatal.

    Try / catch processing and compile errors in general seem to generate more so need to look at 
    this further. 

=== Functional Improvements ===

1)  Remove the opline handler from copy-out formats IF this is the default which is looked up 
    in the zend_opcode_handlers table as a function of the opcode and op1+op2 types.  Removing
    this redundant field will (i) improve serial format compression, and (ii) mean that the serial
    format is no longer link version dependent.

=== External Bugs Found ===

APC Autoglobals will only work if the follow the leading _ convention (see above).

APC uses PG(include_path) for the include path and it should use INI_STR(include_path) as these 
    are'nt necessarily the same.

5.4 Test54 exercises variant include paths.  As part of my test development, I check them out 
    against production PHP 5.3 and 5.4 cli versions.   5.3 works as expected but 5.4 barfs when it
    shouldn't.  I think that this is a Phar bug (Phar intercepts the zend canonicalize function, but
    the Phar 5.4 version doesn't get this right.)  This is a prob with PHP 5.4 and not the test 
    script.  I'll submit the bug when I've got a 5.4 dev build so that I can identify the error and 
    suggest a fix.

=== Test Summaries ===

Tests that currently fail 
=========================

Tests 32 42 42b 43 and 47 fail

What I've done is to run LPC against the PHP test suites running each test twice -- once to prime
the cache and once to use it to load the op arrays, etc. I have copied any that fail -- by abending
or by producing different output or unexplained errors -- into my own LPC suite then cutting the
test down further until I've reached a threshold where I am toggling the errors. This is then used
to analyse and debug the problem. 

